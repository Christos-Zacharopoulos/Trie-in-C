Άναλυση Εργασίας Ανάπτυξη Λογισμικού για Πληροφοριακά Συστήματα(Project1_S16_K23a)


Χειμερινό εξάμηνο 2017-2018

Ομάδα:

Αντώνιος Γκάνιος – Α.Μ. 1115201400032
Σωτήρης Παπαδιαμαντης – Α.Μ. 1115201300132
Χρήστος Ζαχαρόπουλος - Α.Μ. 1115201200037



Η εργασία υλοποιεί όλες τις ζητούμενες δομές και λειτουργίες.


Παρακάτω υπάρχει μια συνοπτική εξήγηση κάθε συνάρτησης που έχει χρησιμοποιηθεί με βάση το αρχείο στο οποίο είναι υλοποιημένη.


main.c :


__int main()

Η συνάρτηση main δέχεται τα αρχέία ως ορίσματα από την γραμμή εντολών,και καλεί τις αντίστοιχες συναρτήσεις για την διαχείριση τους.

Στο τέλος καλεί την __Hash_Table_Destroy() που αναλαμβάνει την διαγραφή όλου του δέντρου(στατικού ή δυναμικού).


file_handler.c :


__int Get_Arguments()

Δέχεται τα ορίσματα της main και τα περνάει τα αρχεία σε File pointers.


__int Close_Files()

Κλείνει τα αρχεία .init και .work .


__int Extract_From_Init()

Εξάγει τα ngrams και τα καλεί την κατάλληλη συνάρτηση για εισαγωγή στο trie ανάλογα με το αν είναι δυναμικό ή στατικό το δέντρο που πρόκειται να υλοποιηθεί.



trie.c:


__Trie* Init_Trie()

Αρχικοποίηση του trie και του linear hash table μέσα στο root.


Οι παρακάτω συναρτήσεις χρησιμοποιούνται μόνο στο δυναμικό trie.

__void Insert_Ngram()

Παίρνει το καινούριο ngram και το εισάγει. Αν κάποιος κόμβος υπάρχει ήδη ενημερώνει τα κατάλληλα πεδία ανάλογα με το αν ήταν διαγραμμένος ή όχι.Η αναζήτηση γίνεται με αλγόριθμο binary insert όπου βρίσκει αν υπάρχει ήδη κάποια λέξη ή την κατάλληλη θέση στην οποία πρέπει να το εισάγουμε.


   __char* Search_Ngram()

Δέχεται το query και ψάχνει μέσα στο trie. Όποιο ngram υπάρχει το εισάγει μέσα στο result_array που του έχει σταλεί με σκοπό την εύρεση των Top K συχνότερων ngrams. Η συνάρτηση ψάχνει μέσα στο hash και ανάλογα με το αν θα βρεί κάτι ή όχι στέλνει το υπόλοιπο querry στην Search_Substream που ψάχνει κάθε φορά το υπόλοιπο μέσα στο trie.



__void Search_Substream()

Δέχεται το querry αφού έχει βρεί την πρώτη λέξη στο hash και συνεχίζει να ψάχνει μέσα στο trie.Εισάγει όποιο ngram βρεί στο result και στον πίνακα για τα Top K συχνότερα ngrams.


Στις παραπάνω συναρτήσεις δεν χρησιμοποιέιται η str_tok για να παίρνουμε μια μια τι λέξεις αλλά η strchr καθώς και δικές μας συναρτήσεις για τον έλεγχο της ύπαρξης μιας λέξης μέσα σε ένα trie node.



__int Delete_Ngram()

Αναδρομική συνάρτηση με σκοπό να γίνει σωστά το labeling σε περίπτωση που βρεθεί το προς διαγραφή ngram.


Για το δυναμικό trie χρησιμοποίηθηκαν και 2 βοηθητικές συναρτήσεις οι οποίες είναι: 


__int my_strcmp()

Η συνάρτηση αποτελεί μια παραλλαγή της strcmp που υπαρχει στην string.h μόνο που είναι τροποποιημένη με σκοπό να πέρνει όλο το querry και να τσεκάρει αν είναι ίδια η λέξη που του στέλνουμε με την πρώτη από το querry.


__int binary_search()


Η συνάρτηση χρησιμοποιείται για την γρήγορη εύρεση ενός κόμβου στον πίνακα από trie nodes που περιέχει την λέξη word με την χρήση του αλγόριθμου Binary Search. Σε περίπτωση που δεν βρεθεί μέσα στον πίνακα επιστρέφει -1.

 

Οι παρακάτω συναρτήσεις χρησιμοποιούνται μόνο στο στατικο trie.


__void Insert_Static()

Παίρνει το καινούριο ngram και το εισάγει. Αν κάποιος κόμβος υπάρχει ήδη ενημερώνει τα κατάλληλα πεδία.Η αναζήτηση γίνεται με αλγόριθμο binary insert όπου βρίσκει αν υπάρχει ήδη κάποια λέξη ή την κατάλληλη θέση στην οποία πρέπει να το εισάγουμε.


__void compress()

Η συνάρτηση καλεί την  compress_bucket για κάθε ένα bucket του hash table με σκοπό να συμπιεστούν όλοι οι κόμβοι.


__void compress_bucket()

Yλοποιήθηκε ο αλγόριθμος του αναδρομικού DFS με σκοπό να δούμε κάθε κόμβος αν πρέπει να γίνει compress με το παιδί του ή όχι.

Σε περίπτωση που κάποιος κόμβος έχει μόνο ένα παιδί τότε καλείται η pull.


__void  pull( )

Ο κόμβος top_node γίνεται compress με τον κόμβο που υπάρχει στον πίνακα με τα παιδιά του εφόσον είναι και μοναδικός. Η διαδικασία αυτή συνεχίζεται μέχρι ο top_node να μην έχει άλλα παιδιά ή να έχει περισσότερα από ένα.


__char* Search_Static()

Δέχεται το query και ψάχνει μέσα στο trie. Όποιο ngram υπάρχει το εισάγει μέσα στο result_array που του έχει σταλεί με σκοπό την εύρεση των Top K συχνότερων ngrams. Η συνάρτηση ψάχνει μέσα στο hash και ανάλογα με το αν θα βρεί κάτι ή όχι στέλνει το υπόλοιπο querry στην Static_Substream που ψάχνει κάθε φορά το υπόλοιπο μέσα στο trie.


__void Static_Substream()

Δέχεται το querry αφού έχει βρεί την πρώτη λέξη στο hash και συνεχίζει να ψάχνει μέσα στο trie.Εισάγει όποιο ngram βρεί στο result και στον πίνακα για τα Top K συχνότερα ngrams.


Στις παραπάνω συναρτήσεις δεν χρησιμοποιέιται η str_tok για να παίρνουμε μια μια τι λέξεις αλλά η strchr καθώς και δικές μας συναρτήσεις για τον έλεγχο της ύπαρξης μιας λέξης μέσα σε ένα trie node.


Για το στατικό trie χρησιμοποίηθηκαν και 3 βοηθητικές συναρτήσεις οι οποίες είναι: 


__int my_strncmp ()

Η συνάρτηση αποτελεί μια παραλλαγή της strncmp που υπαρχει στην string.h μόνο που είναι τροποποιημένη με σκοπό να πέρνει όλο το querry και να τσεκάρει αν είναι ίδια η πρώτη λέξη του συμπιεσμενου κόμβου που του στέλνουμε με την πρώτη από το querry.


__int my_strlen()

Η συνάρτηση αποτελεί μια παραλλαγή της strlen που υπαρχει στην string.h μόνο που είναι τροποποιημένη με σκοπό να πέρνει όλο το querry και να επιστρέφει το μήκος της πρώτης λέξης.


__int Static_binary_search()

Η συνάρτηση χρησιμοποιείται για την γρήγορη εύρεση ενός κόμβου στον πίνακα από συμπιεσμένα trie nodes που περιέχει την λέξη word με την χρήση του αλγόριθμου Binary Search. Σε περίπτωση που δεν βρεθεί μέσα στον πίνακα επιστρέφει -1.


__void Destroy_bucket()

Χρησιμοποιείται για την αποδέσμευση του trie,και του στατικού και του δυναμικού.
	

Linear_Hashing.c:

Όλες οι συναρτήσεις χρησιμοποιούνται και στο δυναμικό και στο στατικό trie.



__Hash_Table* Hash_Table_Init()

Αρχικοποίηση του linear hash table.



__Trie_Node* Hash_Table_Insert()


Παίρνει τη πρώτη λέξη από το καινούριο ngram και την εισάγει. Αν κάποιος κόμβος υπάρχει ήδη απλά τον επιστρέφει.Αν δεν υπάρχει τότε τον εισάγει και αν χρειάζεται καλεί την split().


__void split()

Η συνάρτηση καλέιται αν κατά την εισαγωγή χρειάστηκε να γίνει κάποιος κόμβος split.Για κάθε στοιχείο μέσα στο split index βλέπει αν πρέπει να μεταφερθεί ή όχι στον τελευταίο κόμβο και αν ναι κάνει την μεταφορά.


__Trie_Node* Bucket_Insert()

Εισαγωγή στο bucket ενός νέου trie node. Η εισαγωγή γίνεται με τον αλγόριθμο binary insert.


__Trie_Node* Hash_Table_Search()

Αναζητεί και επιστρέφει έναν κόμβο και αν δεν τον βρει επιστρέφει NULL.


__void Hash_Table_Destroy()

Η συνάρτηση χρησιμοποιείται για την διαγραφή του hash table άρα και κατεπέκταση του trie, καλώντας την Destroy_bucket().


Για το Linear Hash Table χρησιμοποίηθηκαν και 6 βοηθητικές συναρτήσεις οι οποίες είναι: 

__unsigned int hash_function ()
__int power()
__int hash()

Οι συναρτήσεις χρησιμοποιούνται με σκοπό την εύρεση του κατάλληλου bucket για την εισαγωγή,εύρεση και διαγραφή ενός trie node μέσα στο hash table.

__int binary_search_bucket()
__int static_binary_search_bucket()

Οι συναρτήσεις χρησιμοποιούνται για την γρήγορη εύρεση ενός κόμβου σε ένα bucket του hash tableμε την χρήση του αλγόριθμου Binary Search,για δυναμικό και στατικό αντίστοιχα. Σε περίπτωση που δεν βρεθεί μέσα στον πίνακα επιστρέφουν -1.


__Trie_Node* New_Node()

Δημιουργεί και επιστρέφει ένα νέο trie node με σκοπό να αποθηκευτεί μέσα στο hash table.



buffer.c:


__Buffer* Buffer_Init()

Αρχικοποίηση του κυκλικού buffer για την αποθήκευση των jobs.

__void Buffer_Destroy()

Διαγραφή του κυκλικού buffer.

__int Buffer_isEmpty() 

Επιστρέφει 1 αν είναι άδειος ο Buffer,αλλιώς επιστρέφει 0.

__int Buffer_isFull() 

Επιστρέφει 1 αν είναι γεμάτος ο Buffer,αλλιώς επιστρέφει 0.

__void Buffer_Insert_Job()

Εισάγει ένα καινούριο job στον buffer.

__Job* Buffer_Get_Job()

Επιστρέφει ένα job από τον buffer.


__void* static_worker()

Ο worker για τα threads που θα εκτελέσουν τα querries στο στατικό trie.


__void* dynamic_worker()

Ο worker για τα threads που θα εκτελέσουν τα querries στο δυναμικό trie.


__int Extract_From_Query_Static()

Ο master για το στατικό trie.Γεμίζει τον buffer και διαχειρίζεται τις εκτυπώσεις των αποτελεσμάτων.


__int Extract_From_Query_Dynamic()

Ο master για το δυναμικό trie.Γεμίζει τον buffer και διαχειρίζεται τις εκτυπώσεις των αποτελεσμάτων.



top.c:


__Index* Init_Result_Array()

Αρχικοποίηση του πίνακα για τα top k συχνότερα ngrams.


__void Top_Binary_Insert()

Εισαγωγή στον πίνακα με την χρήση του αλγόριθμου Binary Insert.
 

__int Top_Binary_Merge()
__int fasoula()

Οι συναρτήσεις χρησιμοποιούνται για να γίνει αποδοτικά το merge όλων των πινάκων top k από όλα τα threads στο τέλος κάθε ριπής.

__void Free_Result_Array()

Αποδέσμευση μνήμης και αρχικοποίηση τιμών στον πίνακα για να χρησιμοποιηθεί και στην επόμενη ριπή.


__void Print_Top_K()

Εύρεση και εκτύπωση των Top K συχνότερων ngrmas μιας ριπής.



bloom.c:

short int* Init_Bloom()

Αρχικοποιεί τo bloom filter.

static size_t djb_hash()
static size_t fnv1a_hash()
unsigned int hash_bloom ()
unsigned int hash_bloom_1()
static unsigned long sdbm_hash()

Οι 5 hash functions που επιλέχθηκαν για να χρησιμοποιηθούν μαζί με το bloom filter.


int check_bloom()

Ελέγχει αν ένα ngram υπάρχει ήδη μέσα στο bloom filter. Αν υπάρχει επιστρέφει 0 αν δεν υπάρχει το εισάγει και επιστρέφει 1.

void insert_bloom()

Εισάγει ένα ngram στο bloom filter.



